(define (repeated f n)
	(if (= n 1)
		(lambda (x) (f x))
		(lambda (x) (f ((repeated f (- n 1)) x)))
	)
)
(define (smoothing f)
	(let ((dx 0.001))
		(lambda (x) (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3))
	)
)
(define (n-smoothing n)
	(repeated smoothing n)
)
(((n-smoothing 2) square) 5)