(define (filtered-accumulate-recur filter combiner null-value term a next b)
	(
  if (> a b)
    null-value
    (combiner (if (filter (term a)) (term a) null-value)
      (filtered-accumulate-recur filter combiner null-value term (next a) next b)
    )
  )
)
(define (filtered-accumulate-iter filter combiner null-value term a next b)
	(define (iter a result)
    (if (> a b) result
    (iter (next a) (combiner result (if (filter (term a)) (term a) null-value))))
  ) 
  (iter a null-value)
)

; above are two types accumulate

(define (filtered-sum-recur filter term a next b)
  (filtered-accumulate-recur filter + 0 term a next b)
)
(define (filtered-sum-iter filter term a next b)
  (filtered-accumulate-iter filter + 0 term a next b)
)

(define (filtered-interval a b)
  (define (next a)
    (+ a 1)
  )
  (define (term a)
    a
  )
  (define (smallest-divisor n) (find-divisor n 2))
  (define (find-divisor n test-divisor) (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
    (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b) (= (remainder b a) 0))
  (define (prime? a)
    (= a (smallest-divisor a))
  )
  (display (filtered-sum-recur prime? term a next b))
  (display (filtered-sum-iter prime? term a next b))
)
(filtered-interval 0 100)