(define (accumulate-recur combiner null-value term a next b)
	(
  if (> a b)
    null-value
    (combiner (term a)
      (accumulate-recur combiner null-value term (next a) next b)
    )
  )
)
(define (accumulate-iter combiner null-value term a next b)
	(define (iter a result)
    (if (> a b) result
    (iter (next a) (combiner result (term a))))
  ) 
  (iter a null-value)
)

; above are two types accumulate

(define (sum-recur term a next b)
	(accumulate-recur + 0 term a next b)
)
(define (sum-iter term a next b)
	(accumulate-iter + 0 term a next b)
)
(define (integral f a b n)
	(define (next x)
    (+ x 1)
  )
  (define (h) (/ (- b a) n))
  (define (add-it x)
  	(cond ((= x 0) (f (+ a (* x (h)))))
  				((= x n) (f (+ a (* x (h)))))
  				((even? x) (* 2 (f (+ a (* x (h))))))
    			(else (* 4 (f (+ a (* x (h))))))
    )
  )
  (display (* (/ (h) 3.0) (sum-iter add-it 0 next n)))
  (display (* (/ (h) 3.0) (sum-recur add-it 0 next n)))
)
(define (cube x) (* x x x))
(integral cube 0 1 1000)

; above are tests about sum

(define (product-recur term a next b)
	(accumulate-recur * 1 term a next b)
)
(define (product-iter term a next b)
	(accumulate-iter * 1 term a next b)
)
(define (factorial n)
	(define (next x)
    (+ x 1)
  )
  (define (get x)
  	(/ 
      (if (even? (+ x 2))
        (+ x 2)
        (+ x 3)
      ) 
      (if (even? (+ x 2))
        (+ x 3.0)
        (+ x 2.0)
      )
    )
  )
  (display (* 4 (product-iter get 0 next n)))
  (display (* 4 (product-recur get 0 next n)))
)
(factorial 1000)

; above are tests about product