(define (even? n)
	(= (remainder n 2) 0)
)
(define (product-iter term a next b) 
  (define (iter a result)
    (if (> a b) result
    (iter (next a) (* result (term a))))
  ) 
  (iter a 1)
)
(define (product-recur term a next b) (
  if (> a b)
    1
    (* (term a)
      (product-recur term (next a) next b)
    )
  )
)

(define (factorial n)
	(define (next x)
    (+ x 1)
  )
  (define (get x)
  	(/ 
      (if (even? (+ x 2))
        (+ x 2)
        (+ x 3)
      ) 
      (if (even? (+ x 2))
        (+ x 3.0)
        (+ x 2.0)
      )
    )
  )
  (display (* 4 (product-iter get 0 next n)))
  (display (* 4 (product-recur get 0 next n)))
)
(factorial 1000)