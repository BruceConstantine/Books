(define (pp x y)
	(or (< (+ (square (- x 5)) (square (- y 7))) 9) (= (+ (square (- x 5)) (square (- y 7))) 9))
)

(define (estimate-pi P x1 x2 y1 y2)
  (define (random-in-range low high) 
    (let ((range (- high low)))
      (+ low (random range))
    )
  )
  (define random-points
    (cons-stream 
      (cons (random-in-range x1 x2) (random-in-range y1 y2))
      random-points
    )
  )
  (define cesaro-stream 
    (lambda (point) (P (car point) (cdr point)) random-points))
  (define (monte-carlo experiment-stream passed failed) 
    (define (next passed failed)
      (cons-stream
       (/ passed (+ passed failed))
       (monte-carlo
      (stream-cdr experiment-stream) passed failed))) (if (stream-car experiment-stream)
        (next (+ passed 1) failed)
      (next passed (+ failed 1))))
  (stream-map (lambda (p) (/ (* (abs (* (- x2 x1) (- y2 y1))) p) 9)) (monte-carlo cesaro-stream 0 0))
)
