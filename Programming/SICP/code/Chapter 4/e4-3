(define (eval-install)
(define (self-eval exp)
	exp
)
(define (var1 exp env)
	(lookup-variable-value exp env)
)
(define (quote1 exp)
	(text-of-quotation exp)
)
(define (set1 exp env)
	(eval-assignment exp env)
)
(define (define1 exp env)
	(eval-definition exp env)
)
(define (if1 exp env)
	(eval-if exp env)
)
(define (lambda1 exp env)
	(make-procedure (lambda-parameters exp)
                                       (lambda-body exp)
env)
)
(define (begin1 exp env)
	(eval-sequence (begin-actions exp) env)
)
(define (cond1 exp env)
	(eval (cond->if exp) env)
)
(define (apply1 exp env)
	(apply (eval (operator exp) env)
                (list-of-values (operands exp) env))
)
(put 'eval 'self-eval self-eval)
(put 'eval 'var var1)
(put 'eval 'quote quote1)
(put 'eval 'set set1)
(put 'eval 'define define1)
(put 'eval 'if if1)
(put 'eval 'lambda lambda1)
(put 'eval 'begin begin1)
(put 'eval 'cond cond1)
(put 'eval 'apply apply1)
)
