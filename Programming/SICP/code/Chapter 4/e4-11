(define (make-frame variables values) (map (lambda (x y) (cons x y)) variables values))

(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons (cons var val) frame)))

(define (lookup-variable-value var env) 
(define (env-loop env)
	(define (scan frame) 
		(cond 
			((null? frame) (env-loop (enclosing-environment env))) 
			((eq? var (caar frame)) (cdar frame))
			(else (scan (cdr frame)))))
	(if (eq? env the-empty-environment) 
		(error "Unbound variable" var) 
		(let ((frame (first-frame env))) 
			(scan frame))))
(env-loop env))

; just show lookup, define and set is similar
