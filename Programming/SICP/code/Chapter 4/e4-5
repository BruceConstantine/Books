(define (cond? exp) (tagged-list? exp 'cond)) 

(define (cond-clauses exp) (cdr exp))

(define (cond-else-clause? clause)
	(eq? (cond-predicate clause) 'else))

(define (cond-predicate clause) (car clause))

(define (cond-actions clause) (cdr clause))

(define (special? clause) (eq? '=> (cadr clause)))

(define (cond-actions-special clause) (cons (cddr clause) (car clause)))

(define (cond->if exp) 
	(expand-clauses (cond-clauses exp))) 

(define (expand-clauses clauses)
	(if (null? clauses)
		'false
		(let ((first (car clauses)) (rest (cdr clauses)))
			(if (cond-else-clause? first) 
				(if (null? rest)
          (sequence->exp (cond-actions first))
          (error "ELSE clause isn't last: COND->IF"
                       clauses))
        (if (special? first)
        	(make-if (cond-predicate first)
	          (sequence->exp (cond-actions first))
	          (expand-clauses rest))
        	(make-if (cond-predicate first)
	          (sequence->exp (cond-actions first))
	          (expand-clauses rest))
        )
        ))))
