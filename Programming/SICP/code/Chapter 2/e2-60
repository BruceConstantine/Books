(define (element-of-set? x set) (cond ((null? set) false)
((equal? x (car set)) true)
(else (element-of-set? x (cdr set)))))

(define (adjoin-set x set) 
      (cons x set))

(define (intersection-set set1 set2)
(cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
(else (intersection-set (cdr set1) set2))))

(define (union-set set1 set2)
	(append set1 set1)
)

; adjoin-set and union-set will be faster, element-of-set won't change, intersection-set will be slower
; so if your application need faster add and union, you can choose this version, otherwise choose normal version