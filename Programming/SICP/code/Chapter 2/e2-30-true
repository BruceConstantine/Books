(define (square-tree tree)
	(cond ((null? tree) '())
				((not (pair? tree)) (* tree tree))
				(else (cons (square-tree (car tree)) (square-tree (cdr tree))))
	)
)


(square-tree
  (list 1
     (list 2 (list 3 4) 5)
			(list 6 7)
	)
)

; direct implement

(define (square-tree-map tree)
	(map 
		(lambda (x)
			(if (pair? x)
				(square-tree-map x)
				(square x)
			)
		)
		tree)
)

(square-tree-map
  (list 1
     (list 2 (list 3 4) 5)
			(list 6 7)
	)
)

; implement with map
