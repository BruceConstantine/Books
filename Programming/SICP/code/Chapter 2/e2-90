(define install-dense
	(define (adjoin-term term term-list) 
		(cons term term-list)
	)
	(define (first-term term-list) 
		(car term-list)
	) 
	(define (rest-terms term-list) 
		(cdr term-list)
	)
	(define (add-terms-1 L1 L2)
		(let ((t1 (first-term L1)) (t2 (first-term L2)))
				(adjoin-term (add t1 t2) (add-terms-1 (rest-terms L1) (rest-terms L2)))
		)
	)
	(define (add-terms L1 L2)
		(tag (add-terms-1 (content L1) (content L2)))
	)
	(define (mul-terms-1 L1 L2) 
	  (add-terms-1 (mul-term-by-all-terms-1 (first-term L1) L2) (mul-terms (rest-terms L1) L2))
	)
	(define (mul-term-by-all-terms-1 t1 L) 
		(let ((t2 (first-term L)))
	    (adjoin-term 
	    	(mul t1 t2)
	    	(mul-term-by-all-terms-1 t1 (rest-terms L))
	  	)
		)
	)
	(define (mul-terms L1 L2)
		(tag (mul-terms-1 (content L1) (content L2)))
	)
	(define (make-terms terms)
		(tag terms)
	)
	(define (tag p) (attach-tag 'dense-term p))
	(put 'add-terms 'dense-term add-terms)
	(put 'mul-terms 'dense-term mul-terms)
	(put 'make 'dense-term make-terms)
)

; dense

(define install-dense
(define (adjoin-term term term-list) (if (=zero? (coeff term))
term-list
(cons term term-list)))
(define (the-empty-termlist) '())
(define (first-term term-list) (car term-list)) (define (rest-terms term-list) (cdr term-list)) (define (empty-termlist? term-list) (null? term-list)) (define (make-term order coeff) (list order coeff))
	(define (add-terms L1 L2)
		(tag (add-terms-1 (content L1) (content L2)))
	)
(define (add-terms-1 L1 L2)
(cond ((empty-termlist? L1) L2)
((empty-termlist? L2) L1) (else
(let ((t1 (first-term L1)) (t2 (first-term L2)))
(cond ((> (order t1) (order t2)) (adjoin-term
                   t1 (add-terms (rest-terms L1) L2)))
                 ((< (order t1) (order t2))
	(adjoin-term
                   t2 (add-terms L1 (rest-terms L2))))
(else (adjoin-term
                   (make-term (order t1)
                              (add (coeff t1) (coeff t2)))
                   (add-terms (rest-terms L1)
                              (rest-terms L2)))))))))
	
(define (mul-terms-1 L1 L2) (if (empty-termlist? L1) (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term L1) L2)
                 (mul-terms (rest-terms L1) L2))))
(define (mul-term-by-all-terms-1 t1 L) (if (empty-termlist? L)
(the-empty-termlist)
(let ((t2 (first-term L)))
        (adjoin-term
         (make-term (+ (order t1) (order t2))
                    (mul (coeff t1) (coeff t2)))
         (mul-term-by-all-terms t1 (rest-terms L))))))
	(define (mul-terms L1 L2)
		(tag (mul-terms-1 (content L1) (content L2)))
	)
	(define (make-terms terms)
		(tag terms)
	)
	(define (tag p) (attach-tag 'sparse-term p))
	(put 'add-terms 'sparse-term add-terms)
	(put 'mul-terms 'sparse-term mul-terms)
	(put 'make 'sparse-term make-terms)
)

; sparse

; explain:
;		above are implements of sparse-term package and dense-term package
;		we should also change poly package, make add and mul operator use apply-generic
;		
;		as for users, they can generate one kind terms list and pass it into make-poly, so other operators don't need to change
