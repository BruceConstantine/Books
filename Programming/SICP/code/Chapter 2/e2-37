(define (accumulate op initial sequence) 
	(if (null? sequence)
  initial
  (op (car sequence)
     	(accumulate op initial (cdr sequence))
  )
	)
)

(define (get-first-elements seqs)
	(if (null? seqs) 
		'()
		(cons (car (car seqs)) (get-first-elements (cdr seqs)))
	)
)

(define (get-cdr-elements seqs)
	(if (null? seqs) 
		'()
		(cons (cdr (car seqs)) (get-cdr-elements (cdr seqs)))
	)
)

(define (accumulate-n op init seqs) 
	(if (null? (car seqs))
		'()
		(cons (accumulate op init (get-first-elements seqs))
					(accumulate-n op init (get-cdr-elements seqs))
		)
	)
)

; above are utils

(define (dot-product v w)
  (accumulate + 0 (map * v w))
)
(define (matrix-*-vector m v) 
	(map (lambda (t) 
		(dot-product t v)
	) m)
)
(define (transpose mat) 
	(accumulate-n cons '() mat)
)
(define (matrix-*-matrix m n) 
	(let ((cols (transpose n)))
		(map (lambda (t) (matrix-*-vector cols t)) m)
	)
)

(define (v1) (list 1 2 3))
(define (m1) (list (list 1 2 3) (list 2 3 4)))
(define (n1) (transpose (m1)))
(display (matrix-*-vector (m1) (v1)))
(display (matrix-*-matrix (m1) (n1)))