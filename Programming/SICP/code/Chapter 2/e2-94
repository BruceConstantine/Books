(define install-gcd-poly
	(define (div-terms L1 L2) 
		(if (empty-termlist? L1)
			(list (the-empty-termlist) (the-empty-termlist)) 
			(let ((t1 (first-term L1)) (t2 (first-term L2)))
				(if (> (order t2) (order t1))
					(list (the-empty-termlist) L1)
					(let ((new-c (div (coeff t1) (coeff t2))) (new-o (- (order t1) (order t2)))) 
						(let ((rest-of-result (div-terms (sub-term L1 (mul-term L2 (make-term new-o new-c))) L2))) 
							(adjoin-term (make-term new-o new-c) rest-of-result)
						)
					)
				)
			)
		)
	)

	(define (get-remainder terms)
		(if (not (empty-termlist? (car terms)))
			(get-remainder (cdr terms))
			(cdr terms)
		)
	)

	(define (remainder-terms a b)
		(get-remainder (div-terms a b))
	)

	(define (gcd-terms a b) (if (empty-termlist? b)
      a
      (gcd-terms b (remainder-terms a b))))
	(define (gcd-poly p1 p2)
		(if (not (same-variable? (variable p1) (variable p2)))
			(error "Variables are not the same!")
			(make-poly (variable p1) (gcd-terms (term-list p1) (term-list p2)))
		)
	)
	(put 'greatest-common-divisor '(polynomial polynomial) gcd-poly)
	(define (gcd a b) (if (= b 0)
      a
      (gcd b (remainder a b))))
  (put 'gcd '(scheme-number scheme-number) gcd)
)